---
- name: Create aisgen directory
  file:
    path: "{{ rtcc_staging_dir }}/aisgen"
    state: directory
    owner: "{{ RBM_BE_USER }}"
    group: "{{ RBM_BE_GROUP }}"

- name: Update infinys.env
  blockinfile:
    marker: "### {mark} ANSIBLE MANAGED BLOCK CLUSTER###"
    dest: "{{ infinys_dir }}/infinys.env"
    block: |
      export PROV_STAGING_HOME={{ prov_staging_home }}
      export HA_ROOT={{ HA_ROOT }}
      export CLUSTER_NAME={{ CLUSTER_NAME }}
      export LD_LIBRARY_PATH={{ infinys_dir }}/RB/lib:/lib64:$LD_LIBRARY_PATH
      {% set hosts = groups['RBM_BE_APP'] | union(groups['RBM_FE_HA']) %}
      {% set sup_hosts = hosts | map('extract', hostvars, 'oam_nodename') | list %}
      {% set ent_hosts = hosts | map('extract', hostvars, 'rtcc_nodename') | list %}
      {%- if sup_hosts | difference(ent_hosts) -%}
      {% set hostsPairs = sup_hosts | zip(ent_hosts) | list %}
      export RB_CONVERT_HOST_NAMES="{% for supHost, entHost in hostsPairs -%}
      {{ supHost }},{{ entHost }}{% if not loop.last %}|{% endif %}
      {%- endfor %}"
      {% endif -%}

- name: Check rtcc_clustersetup.sql
  delegate_to: localhost
  become: false
  stat:
    path: "{{ TEMPLATE_DIR }}/rtcc_clustersetup.sql.j2"
  register: rtcc_clustersetup_file

- include_tasks: get_schema_version.yaml

- name: Set domain groups list
  set_fact:
    fe_dg_list: "{{ DOMAIN_GROUPS.keys() | map('extract', DOMAIN_GROUPS, 'domain_group_id') | list | sort }}"
  tags: configure_amf

- name: Find all Zookeeper sites
  set_fact:
    zk_sites: "{{ groups['ZK'] | map('extract', hostvars, ['site']) | list | unique }}"

- name: Copy rtcc_clustersetup.sql.j2
  template:
    src: "{{ TEMPLATE_DIR + '/'  if rtcc_clustersetup_file.stat.exists else '' }}rtcc_clustersetup.sql.j2"
    dest: "{{ infinys_dir }}/scripts/rtcc_clustersetup.sql"
    owner: "{{ RBM_BE_USER }}"
    group: "{{ RBM_BE_GROUP }}"
    mode: 0664

- name: Cluster setup (Execute sql file)
  register: clustersetup
  shell: |
    source {{ infinys_dir }}/infinys.env
    sqlplus -s geneva_admin/$rbm_rb_logon_password@{{ be_oracle_service_name }} @scripts/rtcc_clustersetup.sql
  environment:
    rbm_rb_logon_password: "{{ rb_logon_password }}"
  args:
    chdir: "{{ infinys_dir }}"
  tags:
    - skip_ansible_lint

- debug:
    msg: "{{ clustersetup.stdout }}"
  when: not ansible_check_mode

- name: Remove prompts from AISSFGen.sh file
  replace:
    path: "{{ infinys_dir }}/RB/bin/AISSFGen.sh"
    regexp: "read clusterAnswer"
    replace: "clusterAnswer=y"
    backup: yes
  tags: configure_amf

- name: Remove prompts from deleteCluster.ksh file
  replace:
    path: "{{ infinys_dir }}/RB/bin/deleteCluster.ksh"
    regexp: "read answer"
    replace: "answer=y"
    backup: yes
  tags: configure_amf

- name: Run AISSFGen.sh -t
  shell: |
    source {{ infinys_dir }}/infinys.env
    $INFINYS_ROOT/RB/bin/AISSFGen.sh -t
  args:
    chdir: "{{ rtcc_staging_dir }}/aisgen"
  tags:
    - skip_ansible_lint
    - configure_amf

- name: check amfXMLfile.xml
  delegate_to: localhost
  become: false
  stat:
    path: "{{ TEMPLATE_DIR }}/{{ amfXMLfile }}.xml.j2"
  register: custom_amfXMLfile_xml
  tags: configure_amf

- name: Make change in amfRBMClusterinput.xml
  template:
    src: "{{ TEMPLATE_DIR + '/'  if custom_amfXMLfile_xml.stat.exists else '' }}{{ amfXMLfile }}.xml.j2"
    dest: "{{ rtcc_staging_dir }}/aisgen/amfRBMClusterinput.xml"
    owner: "{{ RBM_BE_USER }}"
    group: "{{ RBM_BE_GROUP }}"
    mode: 0664
  tags: configure_amf

- name: check amfXMLfile.xsd
  delegate_to: localhost
  become: false
  stat:
    path: "{{ TEMPLATE_DIR }}/{{ amfXMLfile }}.xsd.j2"
  register: custom_amfXMLfile_xsd
  tags: configure_amf

- name: Make change in amfRBMClusterinput.xsd
  template:
    src: "{{ TEMPLATE_DIR + '/'  if custom_amfXMLfile_xsd.stat.exists else '' }}{{ amfXMLfile }}.xsd.j2"
    dest: "{{ rtcc_staging_dir }}/aisgen/amfRBMClusterinput.xsd"
    owner: "{{ RBM_BE_USER }}"
    group: "{{ RBM_BE_GROUP }}"
    mode: 0664
  tags: configure_amf

- name: Run AISSFGen.sh -lg
  no_log: True
  shell: |
    source {{ infinys_dir }}/infinys.env
    $INFINYS_ROOT/RB/bin/AISSFGen.sh -lg amfRBMClusterinput.xml
  args:
    chdir: "{{ rtcc_staging_dir }}/aisgen"
  tags:
    - skip_ansible_lint
    - configure_amf

- name: Copy rtcc_update_externalconnection.sql.j2
  template:
    src: rtcc_update_externalconnection.sql.j2
    dest: "{{ infinys_dir }}/scripts/rtcc_update_externalconnection.sql"
    owner: "{{ RBM_BE_USER }}"
    group: "{{ RBM_BE_GROUP }}"
    mode: 0755
  when: update_externalconnections

- name: Updating externalconnection table with cassandra, kafka and zookeeper values
  shell: |
    source {{ infinys_dir }}/infinys.env
    sqlplus -s geneva_admin/$rbm_rb_logon_password@{{ be_oracle_service_name }} @rtcc_update_externalconnection.sql
  args:
    chdir: "{{ infinys_dir }}/scripts"
  environment:
    rbm_rb_logon_password: "{{ rb_logon_password }}"
  when: update_externalconnections
  register: rtcc_update_externalconnection

- debug:
    msg: "{{ rtcc_update_externalconnection.stdout }}"
  when: not ansible_check_mode and update_externalconnections

- name: Removing non-required processes
  lineinfile:
    dest: "{{ prov_staging_home }}/lX/clusterMgmt/{{ CLUSTER_NAME }}.unlock"
    regexp: "{{ item }}"
    state: absent
  with_items: "{{ processes_excludes }}"
  tags: configure_amf

- name: Check amfCollSU existence
  shell: "grep -c 'amfCollSU' {{ CLUSTER_NAME }}.unlock | cat"
  args:
    chdir: "{{ prov_staging_home }}/lX/clusterMgmt"
  register: amfCollSU_present
  changed_when: false
  tags:
    - skip_ansible_lint

- name: Configure CollSU (update gparams)
  include_role:
    name: service_rtcc
    tasks_from: merge_gparams.yaml
  vars:
    merge_gparams_lines:
      - { param_name: "COLLconfigurationOnBoo", type: "STRING", start_dtm: "to_date('01-JAN-70','DD-MON-RR')", value: "T" }
      - { param_name: "COLLxmlDir", type: "STRING", start_dtm: "to_date('01-JAN-70','DD-MON-RR')", value: "{{ HA_ROOT }}/work/coll" }
  when: amfCollSU_present.stdout != '0'

- name: Generate AMQ config
  shell: |
    source {{ infinys_dir }}/infinys.env
    {{ infinys_dir }}/RB/bin/generateAMQconfig.sh -f "{{ CLUSTER_NAME }}.args" -memUsage 512 -storeUsage 512 -tempUsage 512
  args:
    chdir: "{{ prov_staging_home }}/lX/clusterMgmt"
  tags:
    - skip_ansible_lint
    - configure_amf
